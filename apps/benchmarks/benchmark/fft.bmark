// Copyright 2020 ETH Zurich and University of Bologna.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: Matteo Perotti <mperotti@iis.ee.ethz.ch>

#include <stdint.h>
#include <string.h>

#include "kernel/fft.h"
#include "printf.h"
#include "runtime.h"

#include "support_data.h"
#include "util.h"

extern unsigned long int NFFT;

extern cmplxtype twiddle_vec[] __attribute__((aligned(32 * NR_LANES), section(".l2")));
cmplxtype samples_vec[MAX_NFFT] __attribute__((aligned(32 * NR_LANES), section(".l2")));
dtype buf[MAX_NFFT] __attribute__((aligned(32 * NR_LANES), section(".l2")));

// Threshold for FP numbers comparison during the final check
#define MAX_NFFT 256
#define THRESHOLD 1

int main() {
  memcpy((void*) samples_copy, (void*) samples, 2 * NFFT * sizeof(dtype));
  memcpy((void*) samples_vec, (void*) samples, 2 * NFFT * sizeof(dtype));

  float* samples_reim = cmplx2reim(samples_vec, buf, NFFT);

  float* twiddle_reim = cmplx2reim(twiddle_vec, buf, ((NFFT >> 1) * (31 - __builtin_clz(NFFT))));

  start_timer();
  fft_r2dif_vec(samples_reim, samples_reim + NFFT,
                twiddle_reim, twiddle_reim + ((NFFT >> 1) * (31 - __builtin_clz(NFFT))),
                mask_addr_vec, index_ptr, NFFT);
  stop_timer();

  int64_t runtime = get_timer();
  float perf = (float) 10.0 * NFFT * (31 - __builtin_clz(NFFT)) / runtime;
  printf("[performance]: %d %f\n", NFFT, perf);

  return 0;
}
